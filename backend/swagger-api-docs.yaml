
openapi: 3.0.3
info:
  title: Voyago API
  description: API pour la réservation de voyages en bus/train et de chambres d'hôtel
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local server
  - url: https://api.voyago.com/api
    description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
      required:
        - username
        - email
        - role
    Trip:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum: [BUS, TRAIN]
        departure:
          type: string
        destination:
          type: string
        departureTime:
          type: string
          format: date-time
        price:
          type: number
          format: double
      required:
        - type
        - departure
        - destination
        - departureTime
        - price
    Hotel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        location:
          type: string
        pricePerNight:
          type: number
          format: double
        availableRooms:
          type: integer
      required:
        - name
        - location
        - pricePerNight
        - availableRooms
    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        tripId:
          type: integer
          format: int64
        hotelId:
          type: integer
          format: int64
        bookingDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
      required:
        - userId
        - bookingDate
        - status
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
        timestamp:
          type: string
          format: date-time
      required:
        - message
        - status
        - timestamp
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      summary: Authenticate user and return JWT
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trips:
    get:
      summary: Get all available trips
      operationId: getAllTrips
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of trips
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new trip (Admin only)
      operationId: createTrip
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
      responses:
        '201':
          description: Trip created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /hotels:
    get:
      summary: Get all available hotels
      operationId: getAllHotels
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of hotels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new hotel (Admin only)
      operationId: createHotel
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
      responses:
        '201':
          description: Hotel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookings:
    post:
      summary: Create a new booking
      operationId: createBooking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get all bookings for the authenticated user
      operationId: getUserBookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
security:
  - BearerAuth: []